#cloud-config

#
# Copyright (c) 2025 Matt Smith
# MIT License - See LICENSE.md for full license text
#
# ===================================================================
# Cloud Config for Ubuntu 24.04 with BitNinja WAF 2.0 and NextCloud
# ===================================================================
# 
# This cloud-init configuration deploys a production-ready NextCloud instance
# with BitNinja WAF 2.0 security on Ubuntu 24.04 LTS, following official documentation:
# https://docs.nextcloud.com/server/latest/admin_manual/installation/source_installation.html
#
# ARCHITECTURE:
# BitNinja WAF2 (HTTPS:443) → Apache (localhost:80) → NextCloud
#
# COMPONENTS:
# - Web Server: Apache 2.4 with mod_php (localhost only)
# - PHP: 8.3 with all required/recommended modules + security hardening
# - Database: MariaDB (utf8mb4, localhost only, SSL enabled)
# - Caching: Redis + APCu (localhost only)
# - Security: BitNinja WAF 2.0, UFW firewall, fail2ban, IPv6 disabled
# - SSL: BitNinja SSL Terminating module handles HTTPS with automatic certificates
#
# SYSTEM REQUIREMENTS:
# - Ubuntu 24.04 LTS server
# - Minimum: 1GB RAM, 1 CPU core, 5GB disk space
# - Recommended: 2GB+ RAM for production workloads
# - Valid domain name with DNS configured
# - BitNinja license key from: https://admin.bitninja.io
#
# MEMORY CONFIGURATION:
# - Default settings optimized for 1GB RAM systems
# - For 2GB+ RAM systems, uncomment the 2GB settings in config section
# - Memory allocation breakdown (1GB system):
#   * System + BitNinja: ~200MB
#   * MariaDB buffer pool: 256MB
#   * PHP memory limit: 256MB
#   * OPcache: 64MB
#   * Available for other processes: ~224MB
#
# CONFIGURATION:
# 1. Update variables in the write_files config.sh section below
# 2. Replace YOUR_LICENSE_KEY with your BitNinja license key
# 3. Customize domain and other settings as needed
# 4. Deploy using your cloud provider's console or API
# 5. Review setup logs in /root/system-setup/logs/ after deployment
#
# ===================================================================

# ===== SYSTEM CONFIGURATION =====
# System hostname and FQDN (set via runcmd using variables)
manage_etc_hosts: true


# ===== CONFIGURATION VARIABLES =====
# Update these variables to customize your deployment
write_files:
  - path: /root/system-setup/config.sh
    content: |
      #!/bin/bash
      # System Configuration Variables
      
      # ===== SYSTEM CONFIGURATION =====
      export DOMAIN="your-domain.com"
      export ADMIN_EMAIL="admin@your-domain.com"
      export BITNINJA_LICENSE="YOUR_LICENSE_KEY"
      export TIMEZONE="UTC"
      export SERVER_IP="$(hostname -I | awk '{print $1}')"
      export SERVER_IPV6="$(hostname -I | awk '{for(i=1;i<=NF;i++) if($i ~ /:/) {print $i; exit}}')"
      
      # ===== DATABASE CONFIGURATION =====
      export DB_NAME="nextcloud"
      export DB_USER="nextcloud"
      # Read generated passwords from secure file (generated once during setup)
      export DB_PASS="$(cat /root/system-setup/.passwords 2>/dev/null | grep '^DB_PASS=' | cut -d'=' -f2)"
      export DB_ROOT_PASS="$(cat /root/system-setup/.passwords 2>/dev/null | grep '^DB_ROOT_PASS=' | cut -d'=' -f2)"
      
      # ===== NEXTCLOUD CONFIGURATION =====
      export NEXTCLOUD_ADMIN_USER="admin"
      # Read generated admin password from secure file (generated once during setup)
      export NEXTCLOUD_ADMIN_PASS="$(cat /root/system-setup/.passwords 2>/dev/null | grep '^NEXTCLOUD_ADMIN_PASS=' | cut -d'=' -f2)"
      export NEXTCLOUD_DATA_DIR="/var/nextcloud-data"
      export NEXTCLOUD_WEB_DIR="/var/www/nextcloud"
      
      # ===== SOCIAL LOGIN CONFIGURATION (OAuth) =====
      # Enable/disable social login providers
      export ENABLE_GOOGLE_LOGIN="false"
      export ENABLE_APPLE_LOGIN="false"
      
      # Google OAuth Configuration
      # Get credentials from: https://console.cloud.google.com/apis/credentials
      export GOOGLE_CLIENT_ID=""
      export GOOGLE_CLIENT_SECRET=""
      
      # Apple Sign In Configuration
      # Get credentials from: https://developer.apple.com/account/resources/identifiers/list
      export APPLE_CLIENT_ID=""        # Services ID
      export APPLE_TEAM_ID=""          # Your Team ID
      export APPLE_KEY_ID=""           # Key ID for Sign in with Apple
      export APPLE_PRIVATE_KEY=""      # Private key content (base64 encoded or file path)
      
      # Social Login Settings
      export SOCIAL_LOGIN_INVITE_ONLY="true"  # Only invited users can register
      export SOCIAL_LOGIN_UPDATE_PROFILE="true"  # Update profile on each login
      
      # ===== NEXTCLOUD APPS CONFIGURATION =====
      # Enable/disable optional Nextcloud apps
      export ENABLE_MAIL_APP="false"       # Email client
      export ENABLE_CALENDAR_APP="false"   # Calendar and scheduling
      export ENABLE_CONTACTS_APP="false"   # Contact management
      export ENABLE_DECK_APP="true"        # Kanban-style project management
      
      # ===== COLLABORATION APPS =====
      # Essential apps for team collaboration
      export ENABLE_TALK_APP="true"        # Video/audio calls and team chat
      export ENABLE_NOTES_APP="true"       # Note-taking and documentation
      export ENABLE_POLLS_APP="true"       # Polls and voting for decisions
      export ENABLE_PASSWORDS_APP="true"   # Secure password manager
      
      # ===== OFFICE SUITE CONFIGURATION =====
      # Nextcloud Office (Collabora Online Built-in)
      export ENABLE_OFFICE_SUITE="true"    # Enable Nextcloud Office integration
      # 
      # Features:
      #   - Built-in CODE server (no external server needed)
      #   - LibreOffice-based editing
      #   - Real-time collaborative editing
      #   - Formats: .docx, .xlsx, .pptx, .odt, .ods, .odp
      #   - Default save location: Team Documents folder
      
      # ===== SYSTEM-WIDE EMAIL CONFIGURATION =====
      # Configure system email for notifications and shared mailbox
      export MAIL_CONFIGURE_SYSTEM="false"   # DISABLED by default - Set to true to enable email notifications
      export MAIL_SYSTEM_FROM_ADDRESS=""     # e.g., nextcloud@your-domain.com
      export MAIL_SYSTEM_FROM_NAME="Nextcloud"
      export MAIL_IMAP_HOST=""               # e.g., imap.gmail.com
      export MAIL_IMAP_PORT="993"            # Standard IMAP SSL port
      export MAIL_IMAP_SSL="ssl"             # ssl, tls, or none
      export MAIL_IMAP_USER=""               # IMAP username (often same as email)
      export MAIL_IMAP_PASSWORD=""           # IMAP password or app-specific password
      export MAIL_SMTP_HOST=""               # e.g., smtp.gmail.com
      export MAIL_SMTP_PORT="465"            # 465 (SSL) or 587 (TLS)
      export MAIL_SMTP_SSL="ssl"             # ssl, tls, or none
      export MAIL_SMTP_USER=""               # SMTP username (often same as email)
      export MAIL_SMTP_PASSWORD=""           # SMTP password or app-specific password
      export MAIL_SMTP_AUTH="login"          # login, plain, or none
      
      # Team mailbox configuration (optional)
      export MAIL_CREATE_SHARED_ACCOUNT="false"  # Create team mailbox accessible to all users
      export MAIL_SHARED_ACCOUNT_NAME="Team Mailbox"
      
      # ===== CALENDAR/CONTACTS CONFIGURATION =====
      # Shared calendars and contacts for organization-wide use
      # Note: These are only created if ENABLE_CALENDAR_APP or ENABLE_CONTACTS_APP is true
      export CALENDAR_CREATE_SHARED="true"       # Create shared calendar (if Calendar app enabled)
      export CALENDAR_SHARED_NAME="Team Calendar"
      export CONTACTS_CREATE_SHARED="true"       # Create shared contacts (if Contacts app enabled)
      export CONTACTS_SHARED_NAME="Team Contacts"
      
      # CalDAV/CardDAV URLs (automatically configured by Nextcloud)
      # Server URL: https://$DOMAIN/remote.php/dav
      # Personal calendars: https://$DOMAIN/remote.php/dav/calendars/USERNAME/
      # Personal contacts: https://$DOMAIN/remote.php/dav/addressbooks/users/USERNAME/
      # Shared calendars: Accessible via CalDAV client after login
      
      # ===== SHARED FOLDERS CONFIGURATION =====
      # Create shared folders accessible to all users
      export FILES_CREATE_SHARED="true"          # Create shared files folder
      export FILES_SHARED_NAME="Team Documents"
      export PHOTOS_CREATE_SHARED="true"         # Create shared photos folder
      export PHOTOS_SHARED_NAME="Team Photos"
      export DECK_CREATE_SHARED="true"           # Create shared Deck board
      export DECK_SHARED_NAME="Team Projects"
      
      # ===== SECURITY CONFIGURATION =====
      export UFW_SSH_PORT="22"
      export UFW_HTTP_PORT="80"
      export UFW_HTTPS_PORT="443"
      export UFW_CAPTCHA_PORT="60413"
      
      # ===== MEMORY CONFIGURATION =====
      # Current settings optimized for 1GB RAM system
      # For 2GB RAM system, uncomment the 2GB settings below and comment out 1GB settings
      
      # ===== PHP CONFIGURATION =====
      # 1GB RAM System Settings (Current)
      export PHP_MEMORY_LIMIT="256M"
      # 2GB RAM System Settings (Uncomment these and comment out 1GB settings above)
      # export PHP_MEMORY_LIMIT="512M"
      
      export PHP_UPLOAD_MAX="10G"
      export PHP_POST_MAX="10G"
      export PHP_MAX_EXECUTION="3600"
      export PHP_MAX_INPUT="3600"
      
      # ===== MARIADB CONFIGURATION =====
      # 1GB RAM System Settings (Current) - Conservative buffer pool
      export MARIADB_BUFFER_POOL="256M"
      # 2GB RAM System Settings (Uncomment these and comment out 1GB settings above)
      # export MARIADB_BUFFER_POOL="1G"
      
      export MARIADB_IO_CAPACITY="4000"
      export MARIADB_MAX_CONNECTIONS="200"
      
      # ===== OPcache CONFIGURATION =====
      export OPCACHE_ENABLE="1"
      export OPCACHE_STRING_BUFFER="16"
      export OPCACHE_MAX_FILES="10000"
      
      # 1GB RAM System Settings (Current) - Conservative OPcache
      export OPCACHE_MEMORY="64"
      # 2GB RAM System Settings (Uncomment these and comment out 1GB settings above)
      # export OPCACHE_MEMORY="128"
      
      # ===== SYSTEM PATHS =====
      export SYSTEM_SETUP_DIR="/root/system-setup"
      export SCRIPTS_DIR="/root/system-setup/scripts"
      export LOGS_DIR="/root/system-setup/logs"
      export DOWNLOADS_DIR="/root/system-setup/downloads"
      
      # ===== GITHUB CONFIGURATION =====
      export GITHUB_REPO="mattx86/ubuntu-bitninja-nextcloud-cloud-config"
      export GITHUB_BRANCH="main"
      export GITHUB_RAW_URL="https://raw.githubusercontent.com/$GITHUB_REPO/$GITHUB_BRANCH"
      
      # ===== SECURITY SETTINGS =====
      export DISABLE_IPV6="true"
      export BIND_LOCALHOST="true"
      
      # ===== LOGGING CONFIGURATION =====
      export LOG_FILE="$LOGS_DIR/deployment.log"
      export CONSOLE="/dev/tty1"
      
      # ===== LOGGING FUNCTION =====
      # Function to output to both log file and console
      log_and_console() {
          echo "$1" | tee -a "$LOG_FILE" | tee "$CONSOLE"
      }
    permissions: '0600'

# ===== DEPLOYMENT COMMANDS =====
# Note: Package installation moved to script _3_package_installation.sh
runcmd:
  # Download and execute all deployment scripts in sequence
  - |
    # Initialize logging
    LOG_FILE="/root/system-setup/logs/deployment.log"
    CONSOLE="/dev/tty1"
    mkdir -p /root/system-setup/logs
    
    # Log function (mimics log_and_console from config.sh)
    echo "=== DOWNLOADING DEPLOYMENT SCRIPTS ===" | tee -a "$LOG_FILE" | tee "$CONSOLE"
    mkdir -p /root/system-setup/scripts
    cd /root/system-setup/scripts
    
    # Download all numbered deployment scripts with retry logic
    wget --tries=3 --timeout=30 --show-progress -O _1_directory_structure.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_1_directory_structure.sh || { echo "ERROR: Failed to download _1_directory_structure.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _2_system_initialization.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_2_system_initialization.sh || { echo "ERROR: Failed to download _2_system_initialization.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _3_package_installation.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_3_package_installation.sh || { echo "ERROR: Failed to download _3_package_installation.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _4_firewall_configuration.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_4_firewall_configuration.sh || { echo "ERROR: Failed to download _4_firewall_configuration.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _5_security_hardening.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_5_security_hardening.sh || { echo "ERROR: Failed to download _5_security_hardening.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _6_system_update.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_6_system_update.sh || { echo "ERROR: Failed to download _6_system_update.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _7_php_configuration.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_7_php_configuration.sh || { echo "ERROR: Failed to download _7_php_configuration.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _8_apache_configuration.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_8_apache_configuration.sh || { echo "ERROR: Failed to download _8_apache_configuration.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _9_ssl_certificate.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_9_ssl_certificate.sh || { echo "ERROR: Failed to download _9_ssl_certificate.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _10_redis_configuration.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_10_redis_configuration.sh || { echo "ERROR: Failed to download _10_redis_configuration.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _11_bitninja_installation.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_11_bitninja_installation.sh || { echo "ERROR: Failed to download _11_bitninja_installation.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _12_password_generation.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_12_password_generation.sh || { echo "ERROR: Failed to download _12_password_generation.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _13_mariadb_configuration.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_13_mariadb_configuration.sh || { echo "ERROR: Failed to download _13_mariadb_configuration.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _14_nextcloud_installation.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_14_nextcloud_installation.sh || { echo "ERROR: Failed to download _14_nextcloud_installation.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _15_system_optimization.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_15_system_optimization.sh || { echo "ERROR: Failed to download _15_system_optimization.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _16_system_verification.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_16_system_verification.sh || { echo "ERROR: Failed to download _16_system_verification.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _17_service_security_verification.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_17_service_security_verification.sh || { echo "ERROR: Failed to download _17_service_security_verification.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _18_cleanup.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_18_cleanup.sh || { echo "ERROR: Failed to download _18_cleanup.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _19_bitninja_final_config.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_19_bitninja_final_config.sh || { echo "ERROR: Failed to download _19_bitninja_final_config.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    wget --tries=3 --timeout=30 --show-progress -O _20_unattended_upgrades.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/_20_unattended_upgrades.sh || { echo "ERROR: Failed to download _20_unattended_upgrades.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"; exit 1; }
    
    # Make all scripts executable with secure permissions (700)
    chmod 700 /root/system-setup/scripts/*.sh
    echo "✓ All deployment scripts downloaded with secure permissions (700)" | tee -a "$LOG_FILE" | tee "$CONSOLE"

  # Execute deployment scripts in sequence
  - /root/system-setup/scripts/_1_directory_structure.sh
  - /root/system-setup/scripts/_2_system_initialization.sh
  - /root/system-setup/scripts/_3_package_installation.sh
  - /root/system-setup/scripts/_4_firewall_configuration.sh
  - /root/system-setup/scripts/_5_security_hardening.sh
  - /root/system-setup/scripts/_6_system_update.sh
  - /root/system-setup/scripts/_7_php_configuration.sh
  - /root/system-setup/scripts/_8_apache_configuration.sh
  - /root/system-setup/scripts/_9_ssl_certificate.sh
  - /root/system-setup/scripts/_10_redis_configuration.sh
  - /root/system-setup/scripts/_11_bitninja_installation.sh
  - /root/system-setup/scripts/_12_password_generation.sh
  - /root/system-setup/scripts/_13_mariadb_configuration.sh
  - /root/system-setup/scripts/_14_nextcloud_installation.sh
  - /root/system-setup/scripts/_15_system_optimization.sh
  - /root/system-setup/scripts/_16_system_verification.sh
  - /root/system-setup/scripts/_17_service_security_verification.sh
  - /root/system-setup/scripts/_18_cleanup.sh
  - /root/system-setup/scripts/_19_bitninja_final_config.sh
  - /root/system-setup/scripts/_20_unattended_upgrades.sh

  # Final deployment completion message
  - |
    LOG_FILE="/root/system-setup/logs/deployment.log"
    CONSOLE="/dev/tty1"
    echo "=== DEPLOYMENT COMPLETE ===" | tee -a "$LOG_FILE" | tee "$CONSOLE"
    echo "✓ All components configured and ready for use." | tee -a "$LOG_FILE" | tee "$CONSOLE"
    echo "" | tee -a "$LOG_FILE" | tee "$CONSOLE"
    echo "⚠ IMPORTANT: If BitNinja is not listening on port 443, run:" | tee -a "$LOG_FILE" | tee "$CONSOLE"
    echo "   sudo bash /root/system-setup/scripts/_19_bitninja_final_config.sh" | tee -a "$LOG_FILE" | tee "$CONSOLE"
    echo "" | tee -a "$LOG_FILE" | tee "$CONSOLE"

# ===== FINAL MESSAGE =====
final_message: "Nextcloud + BitNinja setup complete! If BitNinja not on port 443, run: sudo bash /root/system-setup/scripts/_19_bitninja_final_config.sh"