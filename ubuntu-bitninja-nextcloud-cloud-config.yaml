#cloud-config

#
# Copyright (c) 2025 Matt Smith
# MIT License
#
# ===================================================================
# Cloud Config for Ubuntu 24.04 with BitNinja WAF Pro and NextCloud
# ===================================================================
# 
# This cloud-init configuration deploys a production-ready NextCloud instance
# with BitNinja WAF Pro security on Ubuntu 24.04 LTS, following official documentation:
# https://docs.nextcloud.com/server/latest/admin_manual/installation/source_installation.html
#
# ARCHITECTURE:
# BitNinja WAF Pro (HTTPS:443) → Apache (localhost:80) → NextCloud
#
# COMPONENTS:
# - Web Server: Apache 2.4 with mod_php (localhost only)
# - PHP: 8.3 with all required/recommended modules + security hardening
# - Database: MariaDB (utf8mb4, localhost only, SSL enabled)
# - Caching: Redis + APCu (localhost only)
# - Security: BitNinja WAF Pro, UFW firewall, fail2ban, IPv6 disabled
# - SSL: BitNinja WAF Pro handles HTTPS termination with Let's Encrypt
#
# SYSTEM REQUIREMENTS:
# - Ubuntu 24.04 LTS server
# - Minimum: 1GB RAM, 1 CPU core, 5GB disk space
# - Recommended: 2GB+ RAM for production workloads
# - Valid domain name with DNS configured
# - BitNinja license key from: https://admin.bitninja.io
#
# MEMORY CONFIGURATION:
# - Default settings optimized for 1GB RAM systems
# - For 2GB+ RAM systems, uncomment the 2GB settings in config section
# - Memory allocation breakdown (1GB system):
#   * System + BitNinja: ~200MB
#   * MariaDB buffer pool: 256MB
#   * PHP memory limit: 256MB
#   * OPcache: 64MB
#   * Available for other processes: ~224MB
#
# CONFIGURATION:
# 1. Update variables in the config section below (lines 45-108)
# 2. Replace YOUR_LICENSE_KEY with your BitNinja license key
# 3. Customize domain and other settings as needed
# 4. Deploy using your cloud provider's console or API
# 5. Review setup logs in /root/system-setup/logs/ after deployment
#
# ===================================================================

# ===== SYSTEM CONFIGURATION =====
# System hostname and FQDN (set via runcmd using variables)
manage_etc_hosts: true

# Configure automatic updates
package_update: true
package_upgrade: true
package_reboot_if_required: false

# ===== CONFIGURATION VARIABLES =====
# Update these variables to customize your deployment
write_files:
  - path: /root/system-setup/config.sh
    content: |
      #!/bin/bash
      # System Configuration Variables
      
      # ===== SYSTEM CONFIGURATION =====
      export DOMAIN="your-domain.com"
      export ADMIN_EMAIL="admin@your-domain.com"
      export BITNINJA_LICENSE="YOUR_LICENSE_KEY"
      export TIMEZONE="UTC"
      
      # ===== DATABASE CONFIGURATION =====
      export DB_NAME="nextcloud"
      export DB_USER="nextcloud"
      # Read generated passwords from secure file (generated once during setup)
      export DB_PASS="$(cat /root/system-setup/.passwords 2>/dev/null | grep '^DB_PASS=' | cut -d'=' -f2)"
      export DB_ROOT_PASS="$(cat /root/system-setup/.passwords 2>/dev/null | grep '^DB_ROOT_PASS=' | cut -d'=' -f2)"
      
      # ===== NEXTCLOUD CONFIGURATION =====
      export NEXTCLOUD_ADMIN_USER="admin"
      # Read generated admin password from secure file (generated once during setup)
      export NEXTCLOUD_ADMIN_PASS="$(cat /root/system-setup/.passwords 2>/dev/null | grep '^NEXTCLOUD_ADMIN_PASS=' | cut -d'=' -f2)"
      export NEXTCLOUD_DATA_DIR="/var/nextcloud-data"
      export NEXTCLOUD_WEB_DIR="/var/www/nextcloud"
      
      # ===== SECURITY CONFIGURATION =====
      export UFW_SSH_PORT="22"
      export UFW_HTTPS_PORT="443"
      export BITNINJA_CAPTCHA_PORT_1="60412"
      export BITNINJA_CAPTCHA_PORT_2="60413"
      
      # ===== MEMORY CONFIGURATION =====
      # Current settings optimized for 1GB RAM system
      # For 2GB RAM system, uncomment the 2GB settings below and comment out 1GB settings
      
      # ===== PHP CONFIGURATION =====
      # 1GB RAM System Settings (Current)
      export PHP_MEMORY_LIMIT="256M"
      # 2GB RAM System Settings (Uncomment these and comment out 1GB settings above)
      # export PHP_MEMORY_LIMIT="512M"
      
      export PHP_UPLOAD_MAX="10G"
      export PHP_POST_MAX="10G"
      export PHP_MAX_EXECUTION="3600"
      export PHP_MAX_INPUT="3600"
      
      # ===== MARIADB CONFIGURATION =====
      # 1GB RAM System Settings (Current) - Conservative buffer pool
      export MARIADB_BUFFER_POOL="256M"
      # 2GB RAM System Settings (Uncomment these and comment out 1GB settings above)
      # export MARIADB_BUFFER_POOL="1G"
      
      export MARIADB_IO_CAPACITY="4000"
      export MARIADB_MAX_CONNECTIONS="200"
      
      # ===== OPcache CONFIGURATION =====
      export OPCACHE_ENABLE="1"
      export OPCACHE_STRING_BUFFER="16"
      export OPCACHE_MAX_FILES="10000"
      
      # 1GB RAM System Settings (Current) - Conservative OPcache
      export OPCACHE_MEMORY="64"
      # 2GB RAM System Settings (Uncomment these and comment out 1GB settings above)
      # export OPCACHE_MEMORY="128"
      
      # ===== SYSTEM PATHS =====
      export SYSTEM_SETUP_DIR="/root/system-setup"
      export SCRIPTS_DIR="/root/system-setup/scripts"
      export LOGS_DIR="/root/system-setup/logs"
      export DOWNLOADS_DIR="/root/system-setup/downloads"
      
      # ===== SECURITY SETTINGS =====
      export DISABLE_IPV6="true"
      export BIND_LOCALHOST="true"
    permissions: '0644'

# ===== SYSTEM PACKAGES =====
packages:
  # Core system tools
  - apt-transport-https
  - ca-certificates
  - curl
  - wget
  - gnupg
  - software-properties-common
  - unzip
  - bzip2
  - locate
  - bc
  - net-tools
  - lsb-release
  - apg
  - htop
  - nano
  - vim
  - tree
  
  # Security packages
  - ufw
  - fail2ban
  - unattended-upgrades
  
  # Web server and PHP
  - apache2
  - libapache2-mod-php8.3
  - php8.3
  - php8.3-mysql
  - php8.3-xml
  - php8.3-zip
  - php8.3-curl
  - php8.3-mbstring
  - php8.3-gd
  - php8.3-intl
  - php8.3-bcmath
  - php8.3-gmp
  - php8.3-imagick
  - php8.3-redis
  - php8.3-apcu
  - php8.3-ldap
  - php8.3-bz2
  - php8.3-cli
  - php8.3-fileinfo
  - php8.3-dom
  - php8.3-json
  - php8.3-openssl
  - php8.3-posix
  - php8.3-session
  - php8.3-simplexml
  - php8.3-xmlreader
  - php8.3-xmlwriter
  - php8.3-zlib
  - php8.3-ctype
  - php8.3-iconv
  - php8.3-pcntl
  - php8.3-tokenizer
  - imagemagick
  
  # Database and caching
  - mariadb-server
  - mariadb-client
  - redis-server

# ===== DEPLOYMENT COMMANDS =====
runcmd:
  # ===== 1. SYSTEM INITIALIZATION =====
  - |
    source /root/system-setup/config.sh
    echo "=== SYSTEM INITIALIZATION ===" | tee /dev/tty1
    echo "Setting system hostname and timezone..." | tee /dev/tty1
    hostnamectl set-hostname $DOMAIN
    echo "127.0.0.1 localhost" > /etc/hosts
    echo "127.0.0.1 $DOMAIN" >> /etc/hosts
    timedatectl set-timezone $TIMEZONE
    echo "✓ System initialized: $DOMAIN ($TIMEZONE)" | tee /dev/tty1

  # ===== 2. SECURITY HARDENING =====
  - |
    source /root/system-setup/config.sh
    echo "=== SECURITY HARDENING ===" | tee /dev/tty1
    echo "Applying comprehensive system security..." | tee /dev/tty1
    
    # Disable unnecessary services
    systemctl disable avahi-daemon cups bluetooth snapd ModemManager 2>/dev/null || true
    
    # Secure shared memory with tmpfs
    echo 'tmpfs /tmp tmpfs defaults,nodev,nosuid,noexec,size=1G 0 0' >> /etc/fstab
    echo 'tmpfs /var/tmp tmpfs defaults,nodev,nosuid,noexec,size=100M 0 0' >> /etc/fstab
    
    # Restrict core dumps and SUID
    echo '* hard core 0' >> /etc/security/limits.conf
    echo 'fs.suid_dumpable = 0' >> /etc/sysctl.conf
    
    # Network security hardening
    cat >> /etc/sysctl.conf << 'EOF'
    # Disable network redirects and source routing
    net.ipv4.conf.all.send_redirects = 0
    net.ipv4.conf.default.send_redirects = 0
    net.ipv4.conf.all.accept_redirects = 0
    net.ipv4.conf.default.accept_redirects = 0
    net.ipv4.conf.all.accept_source_route = 0
    net.ipv4.conf.default.accept_source_route = 0
    # Enable logging and ICMP protection
    net.ipv4.conf.all.log_martians = 1
    net.ipv4.conf.default.log_martians = 1
    net.ipv4.icmp_echo_ignore_broadcasts = 1
    net.ipv4.icmp_ignore_bogus_error_responses = 1
    # TCP security
    net.ipv4.tcp_syncookies = 1
    net.ipv4.tcp_rfc1337 = 1
    EOF

  # IPv6 disablement
  - |
    source /root/system-setup/config.sh
    if [ "$DISABLE_IPV6" = "true" ]; then
      echo "Disabling IPv6 system-wide..." | tee /dev/tty1
      echo 'net.ipv6.conf.all.disable_ipv6 = 1' >> /etc/sysctl.conf
      echo 'net.ipv6.conf.default.disable_ipv6 = 1' >> /etc/sysctl.conf
      echo 'net.ipv6.conf.lo.disable_ipv6 = 1' >> /etc/sysctl.conf
      echo 'GRUB_CMDLINE_LINUX_DEFAULT="ipv6.disable=1"' >> /etc/default/grub
      update-grub
      echo "✓ IPv6 disabled system-wide" | tee /dev/tty1
    fi

  # Apply sysctl changes
  - sysctl -p && echo "✓ Security hardening completed" | tee /dev/tty1

  # ===== 3. DIRECTORY STRUCTURE =====
  - |
    echo "=== CREATING DIRECTORY STRUCTURE ===" | tee /dev/tty1
    mkdir -p /root/system-setup/{scripts,logs,downloads} && chmod -R 755 /root/system-setup
    echo "✓ System setup directories created" | tee /dev/tty1

  # ===== 4. PASSWORD GENERATION =====
  - |
    echo "=== GENERATING SECURE PASSWORDS ===" | tee /dev/tty1
    DB_PASS_GEN=$(apg -n 1 -m 16 -x 16 -M NCL)
    DB_ROOT_PASS_GEN=$(apg -n 1 -m 16 -x 16 -M NCL)
    NEXTCLOUD_ADMIN_PASS_GEN=$(apg -n 1 -m 12 -x 12 -M NCL)
    
    # Store passwords securely
    echo "DB_PASS=$DB_PASS_GEN" > /root/system-setup/.passwords
    echo "DB_ROOT_PASS=$DB_ROOT_PASS_GEN" >> /root/system-setup/.passwords
    echo "NEXTCLOUD_ADMIN_PASS=$NEXTCLOUD_ADMIN_PASS_GEN" >> /root/system-setup/.passwords
    chmod 600 /root/system-setup/.passwords
    echo "✓ Secure passwords generated and stored" | tee /dev/tty1

  # ===== 5. BITNINJA INSTALLATION =====
  - |
    echo "=== BITNINJA INSTALLATION ===" | tee /dev/tty1
    echo "Installing BitNinja..." | tee /dev/tty1
    source /root/system-setup/config.sh
    curl -s https://get.bitninja.io/install.sh | /bin/bash -s - --license_key=$BITNINJA_LICENSE || echo "BitNinja installation requires a valid license key"

    if command -v bitninja-cli &> /dev/null && systemctl is-active --quiet bitninja; then
      echo "Configuring BitNinja security features..." | tee /dev/tty1
      
      # Enable core security modules
      bitninja-cli --enable WAF3 2>/dev/null && echo "✓ WAF Pro enabled" | tee /dev/tty1 || echo "WAF Pro already enabled" | tee /dev/tty1
      bitninja-cli --enable malwarescanner 2>/dev/null && echo "✓ Malware Scanner enabled" | tee /dev/tty1 || echo "Malware Scanner already enabled" | tee /dev/tty1
      bitninja-cli --enable ipreputation 2>/dev/null && echo "✓ IP Reputation enabled" | tee /dev/tty1 || echo "IP Reputation already enabled" | tee /dev/tty1
      bitninja-cli --enable honeypot 2>/dev/null && echo "✓ Honeypot enabled" | tee /dev/tty1 || echo "Honeypot already enabled" | tee /dev/tty1
      bitninja-cli --enable dosprotection 2>/dev/null && echo "✓ DoS Protection enabled" | tee /dev/tty1 || echo "DoS Protection already enabled" | tee /dev/tty1
      bitninja-cli --enable outboundspam 2>/dev/null && echo "✓ Outbound Spam enabled" | tee /dev/tty1 || echo "Outbound Spam already enabled" | tee /dev/tty1
      bitninja-cli --enable configparser 2>/dev/null && echo "✓ Config Parser enabled" | tee /dev/tty1 || echo "Config Parser already enabled" | tee /dev/tty1
      bitninja-cli --enable realtimeprotection 2>/dev/null && echo "✓ Real-time Protection enabled" | tee /dev/tty1 || echo "Real-time Protection already enabled" | tee /dev/tty1
      bitninja-cli --enable advancedthreat 2>/dev/null && echo "✓ Advanced Threat Detection enabled" | tee /dev/tty1 || echo "Advanced Threat Detection already enabled" | tee /dev/tty1
      
      echo "✓ BitNinja security features configured" | tee /dev/tty1
    else
      echo "BitNinja not available for automatic configuration" | tee /dev/tty1
    fi

  # ===== 6. FIREWALL CONFIGURATION =====
  - |
    source /root/system-setup/config.sh
    echo "=== FIREWALL CONFIGURATION ===" | tee /dev/tty1
    echo "Configuring UFW firewall..." | tee /dev/tty1
    ufw --force enable && ufw default deny incoming && ufw default allow outgoing
    ufw allow $UFW_SSH_PORT/tcp comment 'SSH administration'
    ufw allow $UFW_HTTPS_PORT/tcp comment 'HTTPS (BitNinja WAF)'
    ufw allow $BITNINJA_CAPTCHA_PORT_1/tcp comment 'BitNinja Captcha Port 1'
    ufw allow $BITNINJA_CAPTCHA_PORT_2/tcp comment 'BitNinja Captcha Port 2'
    ufw reload
    echo "✓ UFW configured: SSH ($UFW_SSH_PORT), HTTPS ($UFW_HTTPS_PORT), BitNinja Captcha ports" | tee /dev/tty1

  # ===== 7. MARIADB DATABASE SETUP =====
  - |
    echo "=== MARIADB DATABASE SETUP ===" | tee /dev/tty1
    echo "Starting and enabling MariaDB..." | tee /dev/tty1
    systemctl start mariadb && systemctl enable mariadb

    source /root/system-setup/config.sh
    echo "Downloading MariaDB configuration..." | tee /dev/tty1
    wget -O /etc/mysql/mariadb.conf.d/60-nextcloud.cnf https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/conf/60-nextcloud.cnf
    sed -i "s/\$MARIADB_BUFFER_POOL/$MARIADB_BUFFER_POOL/g" /etc/mysql/mariadb.conf.d/60-nextcloud.cnf
    sed -i "s/\$MARIADB_IO_CAPACITY/$MARIADB_IO_CAPACITY/g" /etc/mysql/mariadb.conf.d/60-nextcloud.cnf
    sed -i "s/\$MARIADB_MAX_CONNECTIONS/$MARIADB_MAX_CONNECTIONS/g" /etc/mysql/mariadb.conf.d/60-nextcloud.cnf
    systemctl restart mariadb
    echo "✓ MariaDB configured and restarted" | tee /dev/tty1

    echo "Creating NextCloud database and user..." | tee /dev/tty1
    mysql -e "CREATE DATABASE IF NOT EXISTS $DB_NAME CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;"
    mysql -e "CREATE USER IF NOT EXISTS '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASS';"
    mysql -e "GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'localhost';"
    mysql -e "FLUSH PRIVILEGES;"
    echo "✓ NextCloud database and user created" | tee /dev/tty1

    echo "Applying MariaDB security hardening..." | tee /dev/tty1
    mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '$DB_ROOT_PASS'; DELETE FROM mysql.user WHERE User=''; DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1'); DROP DATABASE IF EXISTS test; DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%'; FLUSH PRIVILEGES;"
    echo "✓ MariaDB security hardening completed" | tee /dev/tty1

  # ===== 8. REDIS CACHING SETUP =====
  - |
    source /root/system-setup/config.sh
    echo "=== REDIS CACHING SETUP ===" | tee /dev/tty1
    echo "Configuring Redis cache..." | tee /dev/tty1
    systemctl start redis-server && systemctl enable redis-server
    
    # Redis security configuration
    if [ "$BIND_LOCALHOST" = "true" ]; then
      sed -i 's/^# bind 127.0.0.1 ::1/bind 127.0.0.1/; s/^protected-mode yes/protected-mode yes/' /etc/redis/redis.conf
    fi
    echo -e 'rename-command FLUSHDB ""\nrename-command FLUSHALL ""\nrename-command KEYS ""\nrename-command CONFIG ""\nrename-command EVAL ""' >> /etc/redis/redis.conf
    systemctl restart redis-server
    echo "✓ Redis configured with security hardening" | tee /dev/tty1

  # ===== 9. APACHE WEB SERVER SETUP =====
  - |
    echo "=== APACHE WEB SERVER SETUP ===" | tee /dev/tty1
    echo "Starting and enabling Apache..." | tee /dev/tty1
    systemctl enable apache2

    source /root/system-setup/config.sh
    echo "Configuring Apache modules and localhost binding..." | tee /dev/tty1
    a2enmod rewrite headers env dir mime setenvif remoteip && a2dismod status && a2dissite 000-default.conf
    
    # Configure Apache for localhost-only binding (BitNinja WAF handles external HTTPS)
    sed -i 's/Listen 80/Listen 127.0.0.1:80/' /etc/apache2/ports.conf
    sed -i 's/Listen 443/Listen 127.0.0.1:443/' /etc/apache2/ports.conf
    echo "✓ Apache configured for localhost-only binding" | tee /dev/tty1

    echo "Applying Apache security hardening..." | tee /dev/tty1
    sed -i 's/^ServerTokens.*/ServerTokens Prod/' /etc/apache2/conf-available/security.conf
    sed -i 's/^ServerSignature.*/ServerSignature Off/' /etc/apache2/conf-available/security.conf
    a2enconf security
    echo "✓ Apache security hardening applied" | tee /dev/tty1

  # ===== 10. PHP CONFIGURATION =====
  - |
    source /root/system-setup/config.sh
    echo "=== PHP CONFIGURATION ===" | tee /dev/tty1
    echo "Configuring PHP for NextCloud..." | tee /dev/tty1
    
    # PHP performance and security configuration
    sed -i "s/memory_limit = .*/memory_limit = $PHP_MEMORY_LIMIT/; s/upload_max_filesize = .*/upload_max_filesize = $PHP_UPLOAD_MAX/; s/post_max_size = .*/post_max_size = $PHP_POST_MAX/; s/max_execution_time = .*/max_execution_time = $PHP_MAX_EXECUTION/; s/max_input_time = .*/max_input_time = $PHP_MAX_INPUT/; s/;date.timezone =.*/date.timezone = $TIMEZONE/" /etc/php/8.3/apache2/php.ini
    
    # OPcache optimization for NextCloud
    sed -i "s/;opcache.enable=.*/opcache.enable=$OPCACHE_ENABLE/; s/;opcache.interned_strings_buffer=.*/opcache.interned_strings_buffer=$OPCACHE_STRING_BUFFER/; s/;opcache.max_accelerated_files=.*/opcache.max_accelerated_files=$OPCACHE_MAX_FILES/; s/;opcache.memory_consumption=.*/opcache.memory_consumption=$OPCACHE_MEMORY/; s/;opcache.save_comments=.*/opcache.save_comments=1/; s/;opcache.revalidate_freq=.*/opcache.revalidate_freq=1/" /etc/php/8.3/apache2/php.ini
    
    # PHP security hardening
    sed -i 's/expose_php = .*/expose_php = Off/; s/;session.cookie_secure =.*/session.cookie_secure = 1/; s/;session.cookie_httponly =.*/session.cookie_httponly = 1/; s/;session.use_strict_mode =.*/session.use_strict_mode = 1/' /etc/php/8.3/apache2/php.ini
    echo "✓ PHP configured with performance and security optimizations" | tee /dev/tty1

  # ===== 11. NEXTCLOUD INSTALLATION =====
  - |
    source /root/system-setup/config.sh
    echo "=== NEXTCLOUD INSTALLATION ===" | tee /dev/tty1
    echo "Downloading and installing NextCloud..." | tee /dev/tty1
    cd $DOWNLOADS_DIR && \
    wget https://download.nextcloud.com/server/releases/latest.zip -O nextcloud.zip && \
    unzip nextcloud.zip && \
    mv nextcloud $NEXTCLOUD_WEB_DIR && \
    chown -R www-data:www-data $NEXTCLOUD_WEB_DIR && \
    chmod -R 755 $NEXTCLOUD_WEB_DIR && \
    echo "✓ NextCloud installed to $NEXTCLOUD_WEB_DIR" | tee /dev/tty1

    echo "Creating NextCloud data directory..." | tee /dev/tty1
    mkdir -p $NEXTCLOUD_DATA_DIR && chown -R www-data:www-data $NEXTCLOUD_DATA_DIR && chmod -R 755 $NEXTCLOUD_DATA_DIR
    echo "✓ NextCloud data directory created" | tee /dev/tty1

  # ===== 12. APACHE VIRTUAL HOST CONFIGURATION =====
  - |
    source /root/system-setup/config.sh
    echo "=== APACHE VIRTUAL HOST CONFIGURATION ===" | tee /dev/tty1
    echo "Downloading Apache NextCloud configuration..." | tee /dev/tty1
    wget -O /etc/apache2/sites-available/nextcloud.conf https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/conf/nextcloud.conf
    sed -i "s/\$DOMAIN/$DOMAIN/g" /etc/apache2/sites-available/nextcloud.conf
    sed -i "s/\$ADMIN_EMAIL/$ADMIN_EMAIL/g" /etc/apache2/sites-available/nextcloud.conf
    sed -i "s/\$NEXTCLOUD_WEB_DIR/$NEXTCLOUD_WEB_DIR/g" /etc/apache2/sites-available/nextcloud.conf
    a2ensite nextcloud.conf
    systemctl reload apache2
    echo "✓ Apache virtual host configured" | tee /dev/tty1

  # ===== 13. NEXTCLOUD CLI CONFIGURATION =====
  - |
    source /root/system-setup/config.sh
    echo "=== NEXTCLOUD CLI CONFIGURATION ===" | tee /dev/tty1
    echo "Downloading NextCloud installation script..." | tee /dev/tty1
    wget -O $SCRIPTS_DIR/install-nextcloud.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/install-nextcloud.sh
    chmod +x $SCRIPTS_DIR/install-nextcloud.sh
    $SCRIPTS_DIR/install-nextcloud.sh
    echo "✓ NextCloud CLI configuration completed" | tee /dev/tty1

  # ===== 14. SECURITY HARDENING =====
  - |
    source /root/system-setup/config.sh
    echo "=== SECURITY HARDENING ===" | tee /dev/tty1
    echo "Configuring fail2ban..." | tee /dev/tty1
    
    # Download fail2ban configurations
    wget -O /etc/fail2ban/jail.local https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/conf/jail.local
    sed -i "s/\$UFW_SSH_PORT/$UFW_SSH_PORT/g" /etc/fail2ban/jail.local
    sed -i "s/\$UFW_HTTPS_PORT/$UFW_HTTPS_PORT/g" /etc/fail2ban/jail.local
    sed -i "s/\$BITNINJA_CAPTCHA_PORT_1/$BITNINJA_CAPTCHA_PORT_1/g" /etc/fail2ban/jail.local
    sed -i "s/\$BITNINJA_CAPTCHA_PORT_2/$BITNINJA_CAPTCHA_PORT_2/g" /etc/fail2ban/jail.local
    sed -i "s/\$NEXTCLOUD_WEB_DIR/$NEXTCLOUD_WEB_DIR/g" /etc/fail2ban/jail.local
    
    # Download filter configurations
    wget -O /etc/fail2ban/filter.d/nextcloud.conf https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/conf/nextcloud.conf
    wget -O /etc/fail2ban/filter.d/bitninja-waf.conf https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/conf/bitninja-waf.conf
    wget -O /etc/fail2ban/filter.d/bitninja-captcha.conf https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/conf/bitninja-captcha.conf
    
    systemctl start fail2ban && systemctl enable fail2ban
    echo "✓ fail2ban configured for SSH, BitNinja, and BitNinja protection" | tee /dev/tty1
  
  # Configure automatic security updates
  - |
    echo "Downloading unattended upgrades configuration..." | tee /dev/tty1
    wget -O /etc/apt/apt.conf.d/50unattended-upgrades https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/conf/50unattended-upgrades
    echo "✓ Automatic security updates configured" | tee /dev/tty1

  # ===== 15. SYSTEM OPTIMIZATION =====
  - |
    source /root/system-setup/config.sh
    echo "=== SYSTEM OPTIMIZATION ===" | tee /dev/tty1
    echo "Applying system performance optimizations..." | tee /dev/tty1
    echo "vm.swappiness=10" >> /etc/sysctl.conf
    echo "net.core.rmem_max = 16777216" >> /etc/sysctl.conf
    echo "net.core.wmem_max = 16777216" >> /etc/sysctl.conf
    sysctl -p
    echo "✓ System performance optimizations applied" | tee /dev/tty1

  # ===== 16. HELPER SCRIPTS DOWNLOAD =====
  - |
    source /root/system-setup/config.sh
    echo "=== DOWNLOADING HELPER SCRIPTS ===" | tee /dev/tty1
    echo "Downloading system management scripts..." | tee /dev/tty1
    
    # Download all helper scripts
    wget -O $SCRIPTS_DIR/comprehensive-system-check.sh https://raw.githubusercontent.com/mattx86/ubuntu-bitninja-nextcloud-cloud-config/main/scripts/comprehensive-system-check.sh
    
    # Make scripts executable
    chmod +x $SCRIPTS_DIR/*.sh
    echo "✓ Helper scripts downloaded and configured" | tee /dev/tty1

  # ===== 17. SYSTEM VERIFICATION =====
  - |
    source /root/system-setup/config.sh
    echo "=== SYSTEM VERIFICATION ===" | tee /dev/tty1
    echo "Running comprehensive system check..." | tee /dev/tty1
    $SCRIPTS_DIR/comprehensive-system-check.sh
    echo "✓ System verification completed" | tee /dev/tty1

  # ===== 18. SERVICE SECURITY VERIFICATION =====
  - |
    source /root/system-setup/config.sh
    echo "=== SERVICE SECURITY VERIFICATION ===" | tee /dev/tty1
    echo "Verifying service bindings..." | tee /dev/tty1
    
    # Check service bindings
    if netstat -tlnp | grep -q ":3306.*127.0.0.1"; then
      echo "✓ MariaDB bound to localhost only" | tee /dev/tty1
    else
      echo "⚠️  MariaDB may not be bound to localhost only" | tee /dev/tty1
    fi
    
    if netstat -tlnp | grep -q ":6379.*127.0.0.1"; then
      echo "✓ Redis bound to localhost only" | tee /dev/tty1
    else
      echo "⚠️  Redis may not be bound to localhost only" | tee /dev/tty1
    fi
    
    if netstat -tlnp | grep -q ":80.*127.0.0.1"; then
      echo "✓ Apache bound to localhost only (BitNinja WAF handles HTTPS)" | tee /dev/tty1
    else
      echo "⚠️  Apache may not be bound to localhost only" | tee /dev/tty1
    fi
    
    if [ "$DISABLE_IPV6" = "true" ]; then
      if [ ! -f /proc/net/if_inet6 ]; then
        echo "✓ IPv6 successfully disabled" | tee /dev/tty1
      else
        echo "⚠️  IPv6 may still be enabled" | tee /dev/tty1
      fi
    fi
    
    echo "✓ Service security verification completed" | tee /dev/tty1

  # ===== 19. CLEANUP =====
  - |
    source /root/system-setup/config.sh
    echo "=== CLEANUP ===" | tee /dev/tty1
    echo "Performing final cleanup..." | tee /dev/tty1
    apt-get autoremove -y && apt-get clean
    rm -f $DOWNLOADS_DIR/nextcloud.zip
    echo "✓ System cleanup completed" | tee /dev/tty1

  # ===== 20. COMPLETION =====
  - |
    echo "=== DEPLOYMENT COMPLETE ===" | tee /dev/tty1
    echo "✓ All components configured and ready for use." | tee /dev/tty1

# ===== FINAL MESSAGE =====
final_message: "Nextcloud + BitNinja setup complete! See README.md for comprehensive instructions and next steps."